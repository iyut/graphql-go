package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"

	graphql "github.com/graph-gophers/graphql-go"
)

/****
*********************
SET THE TYPE FOR GRAPHQL
*********************
****/
type User struct {
	UserID   graphql.ID
	Username string
	Email    string
	Posts    []*Post
}

type Post struct {
	PostID graphql.ID
	Title  string
}

type PostInput struct {
	Title string
}

// Define mock data:
var users = []*User{
	{
		UserID:   graphql.ID("u-001"),
		Username: "nyxerys",
		Email:    "nyxerys@nyxerys.com",
		Posts: []*Post{
			{PostID: "n-001", Title: "Olá Mundo!"},
			{PostID: "n-002", Title: "Olá novamente, mundo!"},
			{PostID: "n-003", Title: "Olá, escuridão!"},
		},
	}, {
		UserID:   graphql.ID("u-002"),
		Username: "rdnkta",
		Email:    "rdnkta@rdnkta.com",
		Posts: []*Post{
			{PostID: "n-004", Title: "Привіт Світ!"},
			{PostID: "n-005", Title: "Привіт ще раз, світ!"},
			{PostID: "n-006", Title: "Привіт, темрява!"},
		},
	}, {
		UserID:   graphql.ID("u-003"),
		Username: "username_ZAYDEK",
		Email:    "username_ZAYDEK@zaydek.com",
		Posts: []*Post{
			{PostID: "n-007", Title: "Hello, world!"},
			{PostID: "n-008", Title: "Hello again, world!"},
			{PostID: "n-009", Title: "Hello, darkness!"},
		},
	},
}

/****
*********************
DEFINE THE RESOLVER FOR GRAPHQL
*********************
****/

/*
 * RootResolver
 *
 * type User {
 * 	userID: ID!
 * 	username: String!
 * 	emoji: String!
 * 	notes: [Note!]!
 * }
 */
type RootResolver struct{}

func (r *RootResolver) Users() ([]*UserResolver, error) {

	var userRxs []*UserResolver

	for _, user := range users {
		userRxs = append(userRxs, &UserResolver{user})
	}
	return userRxs, nil
}

func (r *RootResolver) User(args struct{ UserID graphql.ID }) (*UserResolver, error) {

	for _, user := range users {
		if args.UserID == user.UserID {
			return &UserResolver{user}, nil
		}
	}

	return nil, nil
}

func (r *RootResolver) Posts(args struct{ UserID graphql.ID }) ([]*PostResolver, error) {

	user, err := r.User(args)
	if user == nil || err != nil {

		return nil, err
	}

	return user.Posts(), nil
}

func (r *RootResolver) Post(args struct{ PostID graphql.ID }) (*PostResolver, error) {

	for _, user := range users {
		for _, post := range user.Posts {

			if args.PostID == post.PostID {
				return &PostResolver{post}, nil
			}
		}
	}

	return nil, nil
}

type CreatePostArgs struct {
	UserID graphql.ID
	Post   PostInput
}

func (r *RootResolver) CreatePost(args CreatePostArgs) (*PostResolver, error) {

	var post *Post

	for _, user := range users {
		// Create a note with a note ID of n-010:
		post = &Post{PostID: "n-010", Title: args.Post.Title}
		user.Posts = append(user.Posts, post) // Push note.
	}
	// Return note:
	return &PostResolver{post}, nil

}

/*
 * UserResolver
 *
 * type User {
 * 	userID: ID!
 * 	username: String!
 * 	emoji: String!
 * 	notes: [Note!]!
 * }
 */

type UserResolver struct {
	u *User
}

func (r *UserResolver) UserID() graphql.ID {
	return r.u.UserID
}

func (r *UserResolver) Username() string {
	return r.u.Username
}

func (r *UserResolver) Email() string {
	return r.u.Email
}

func (r *UserResolver) Posts() []*PostResolver {
	var postRxs []*PostResolver
	for _, post := range r.u.Posts {
		postRxs = append(postRxs, &PostResolver{post})
	}
	return postRxs
}

/*
 * PostResolver
 *
 * type Post {
 * 	PostID: ID!
 * 	title: String!
 * }
 */

type PostResolver struct {
	p *Post
}

func (r *PostResolver) PostID() graphql.ID {
	return r.p.PostID
}

func (r *PostResolver) Title() string {
	return r.p.Title
}

func main() {

	ctx := context.Background()

	bstr, err := ioutil.ReadFile("./main-schema.graphql")
	if err != nil {
		panic(err)
	}

	schemaString := string(bstr)

	schema, err := graphql.ParseSchema(schemaString, &RootResolver{})
	if err != nil {
		panic(err)
	}

	type JSON = map[string]interface{}

	type ClientQuery struct {
		OpName    string
		Query     string
		Variables JSON
	}

	q1 := ClientQuery{
		OpName: "Users",
		Query: `query Users{
			users{
				userID
				username
				email
			}
		}`,
		Variables: nil,
	}

	resp1 := schema.Exec(ctx, q1.Query, q1.OpName, q1.Variables)
	json1, err := json.MarshalIndent(resp1, "", "\t")
	if err != nil {
		panic(err)
	}

	fmt.Println(string(json1))

	q2 := ClientQuery{
		OpName: "User",
		Query: `query User($userID: ID!){
			user(userID: $userID){
				userID
				username
				email
			}
		}`,
		Variables: map[string]interface{}{
			"userID": "u-001",
		},
	}

	resp2 := schema.Exec(ctx, q2.Query, q2.OpName, q2.Variables)
	json2, err := json.MarshalIndent(resp2, "", "\t")
	if err != nil {
		panic(err)
	}

	fmt.Println(string(json2))

	q3 := ClientQuery{
		OpName: "Posts",
		Query: `query Posts($userID: ID!){
			posts(userID: $userID){
				postID
				title
			}
		}`,
		Variables: map[string]interface{}{
			"userID": "u-002",
		},
	}

	resp3 := schema.Exec(ctx, q3.Query, q3.OpName, q3.Variables)
	json3, err := json.MarshalIndent(resp3, "", "\t")
	if err != nil {
		panic(err)
	}

	fmt.Println(string(json3))

	q4 := ClientQuery{
		OpName: "Post",
		Query: `query Post($postID: ID!){
			post(postID: $postID){
				postID
				title
			}
		}`,
		Variables: map[string]interface{}{
			"postID": "n-007",
		},
	}

	resp4 := schema.Exec(ctx, q4.Query, q4.OpName, q4.Variables)
	json4, err := json.MarshalIndent(resp4, "", "\t")
	if err != nil {
		panic(err)
	}

	fmt.Println(string(json4))

	q5 := ClientQuery{
		OpName: "CreatePost",
		Query: `mutation CreatePost($userID: ID!, $post: PostInput!){
			createPost(userID: $userID, post: $post){
				postID,
				title
			}
		}`,
		Variables: JSON{
			"userID": "u-0003",
			"post": JSON{
				"title": "We create a post!",
			},
		},
	}

	resp5 := schema.Exec(ctx, q5.Query, q5.OpName, q5.Variables)
	json5, err := json.MarshalIndent(resp5, "", "\t")
	if err != nil {
		panic(err)
	}

	fmt.Println(string(json5))

	q6 := ClientQuery{
		OpName: "Users",
		Query: `query Users{
			users{
				userID
				username
				email
				posts {
					postID
					title
				}
			}
		}`,
		Variables: nil,
	}

	resp6 := schema.Exec(ctx, q6.Query, q6.OpName, q6.Variables)
	json6, err := json.MarshalIndent(resp6, "", "\t")
	if err != nil {
		panic(err)
	}

	fmt.Println(string(json6))
}
